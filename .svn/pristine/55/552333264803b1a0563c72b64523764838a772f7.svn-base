<template>
  <span v-if="this.SelectType === 'basic'">
    <a class="zfbtn" data-toggle="dropdown">
      <div class="down-arrow"></div>
      <div>
        <span
          v-text="SelectedItem ?
          SelectedItem[TextField] :
          this.getSanaTextValue(this.DefaultTextSanaTextKey, this.DefaultText)"
        ></span>
      </div>
    </a>
    <ul class="dropdown-menu dropdown-menu-right">
      <li v-for="(item,index) in DataList" :key="index">
        <a v-on:click="changeSelection(item)">
          {{item[TextField]}}
          <template v-if="item.InnerHtml">
            <span v-html="item.InnerHtml"></span>
          </template>
        </a>
      </li>
    </ul>
  </span>
  <span v-else>
    <div class="dropdown">
      <div class="btn btn-default" data-toggle="dropdown">
        <span
          v-text="SelectedItem ?
          SelectedItem[TextField] :
          this.getSanaTextValue(this.DefaultTextSanaTextKey, this.DefaultText)"
        ></span>
        <div class="down-arrow"></div>
      </div>
      <ul class="dropdown-menu dropdown-menu-right">
        <li v-for="(item,index) in DataList" :key="index">
          <a v-on:click="changeSelection(item)">
            {{item[TextField]}}
            <template v-if="item.InnerHtml">
              <span v-html="item.InnerHtml"></span>
            </template>
          </a>
        </li>
      </ul>
    </div>
  </span>
</template>

<script>
export default {
  name: "Dropdown",

  props: {
    SelectType: {
      type: String,
      default: "other"
    },
    // options array
    DataList: {
      type: Array,
      required: true
    },
    // default item to be selected
    PreSelecteditem: {
      type: Object,
      required: false
    },
    // if field to bind on drop down
    IdField: {
      type: String,
      required: true
    },
    // text field to bind on drop down
    TextField: {
      type: String,
      required: true
    },
    DefaultText: {
      type: String,
      required: false
    },
    DefaultTextSanaTextKey: {
      type: String,
      required: false
    }
  },

  data() {
    return {
      SelectedItem: {}
    };
  },
  created() {
    this.changeSelection(this.PreSelecteditem, false);
  },
  watch: {
    SelectedItem: (oldValue, newValue) => {
      console.log(oldValue, newValue);
    }
  },
  methods: {
    changeSelection(data, emitEvent = true) {
      this.SelectedItem = data;
      if (emitEvent) {
        this.$emit("onChangeSelection", this.SelectedItem);
      }
    },
    getSanaTextValue(textKey, defaultValue) {
      if (!textKey) {
        return defaultValue || "";
      }
      return this.GetSanaText(textKey, defaultValue);
    }
  }
};
</script>

<style lang="scss" scoped></style>
