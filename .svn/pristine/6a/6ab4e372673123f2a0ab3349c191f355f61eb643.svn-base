<template>
  <div class="vnis qty-box-block">
    <input
      type="number"
      v-bind:value="numericValue"
      @keypress="validateInput"
      @input="inputValue"
      :class="inputClass"
      :min="min"
      :max="max"
      debounce="500"
      v-on:blur=" onQtyChange($event.target.value)"
      name="quantity"
      v-bind:disabled="IsDisabled"
    >
    <div class="quantity-box-pm-ic-block">
      <button @click="increaseNumber" :class="buttonClassI" v-bind:disabled="IsDisabled">˄</button>
      <button @click="decreaseNumber" :class="buttonClassD" v-bind:disabled="IsDisabled">˅</button>
    </div>
  </div>
</template>

<script>
export default {
  name: "NumberInputSpinner",
  data() {
    return {
      numericValue: this.value,
      timer: null
    };
  },
  props: {
    value: {
      type: Number,
      default: 0
    },
    min: {
      default: 0,
      type: Number
    },
    max: {
      default: 10,
      type: Number
    },
    step: {
      default: 1,
      type: Number
    },
    mouseDownSpeed: {
      default: 100,
      type: Number
    },
    inputClass: {
      default: "vnis__input",
      type: String
    },
    buttonClassD: {
      default: "vnis__button",
      type: String
    },
    buttonClassI: {
      default: "vnis__button vnis__button__increment",
      type: String
    },
    integerOnly: {
      default: false,
      type: Boolean
    },
    IsDisabled: {
      type: Boolean,
      default: false
    }
  },
  mounted() {
    this.processQuantityModel();
  },
  methods: {
    clearTimer() {
      if (this.timer) {
        clearInterval(this.timer);
        this.timer = null;
      }
    },
    whileMouseDown(callback) {
      if (this.timer === null) {
        this.timer = setInterval(() => {
          callback();
        }, this.mouseDownSpeed);
      }
    },
    increaseNumber() {
      this.numericValue += this.step;
    },
    decreaseNumber() {
      this.numericValue -= this.step;
    },
    isInteger(evt) {
      // eslint-disable-next-line no-param-reassign
      evt = evt || window.event;
      let key = evt.keyCode || evt.which;
      key = String.fromCharCode(key);
      const regex = /[0-9]/;
      if (!regex.test(key)) {
        // eslint-disable-next-line no-param-reassign
        evt.returnValue = false;
        if (evt.preventDefault) evt.preventDefault();
      }
    },
    isNumber(evt) {
      // eslint-disable-next-line no-param-reassign
      evt = evt || window.event;
      const charCode = evt.which ? evt.which : evt.keyCode;
      if (
        charCode > 31
        && (charCode < 48 || charCode > 57)
        && charCode !== 46
      ) {
        evt.preventDefault();
        return false;
      }
      return true;
    },
    validateInput(evt) {
      if (this.integerOnly === true) {
        this.isInteger(evt);
      } else {
        this.isNumber(evt);
      }
    },
    inputValue(evt) {
      this.numericValue = evt.target.value
        ? parseInt(evt.target.value, 10)
        : this.min;
    },
    processQuantityModel() {
      if (this.QuantityModel) {
        this.Min = this.QuantityModel.Minimum;
        this.Step = this.QuantityModel.Step;
        this.Max = this.QuantityModel.Maximum;
        this.Qty = this.QuantityModel.Current
          ? this.QuantityModel.Current
          : this.QuantityModel.Min;
      }
    },
    onQtyChange(value) {
      if (this.Qty !== value) {
        this.Qty = value;
        this.$emit("onQuantityChange", this.Qty);
      }
    }
  },
  watch: {
    numericValue(val, oldVal) {
      if (val <= this.min) {
        this.numericValue = parseInt(this.min, 10);
      }
      if (val >= this.max) {
        this.numericValue = parseInt(this.max, 10);
      }
      if (val <= this.max && val >= this.min) {
        this.$emit("input", val, oldVal);
      }
    }
  }
};
</script>
