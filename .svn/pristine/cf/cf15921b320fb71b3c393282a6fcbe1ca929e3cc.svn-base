<template>
  <div>
    <div class="inner-header">
      <!-- Appheader componenet  -->
      <sana-app-header v-bind:headerTitle="this.GetSanaText('SearchPage_Title','Search Result')"/>
    </div>
    <div class="row">
      <div class="col-7">
        <!-- search box -->
        <sana-searchbox v-on:onSearch="handleProductSearch"></sana-searchbox>
      </div>
    </div>
    <!-- search result container -->
    <div>
      <div class="row list-action-container">
        <div class="col-lg-6 col-4">
          <p v-text="searchResultSummarytext">Search on: brake disc - 132 product(s) found</p>
        </div>
        <div class="col-lg-6 col-8">
          <div class="view-list-grid-block">
            <ul>
              <li>
                <p class="text-view" v-text="this.GetSanaText('SearchPage_View','View:')">View:</p>
              </li>
              <li>
                <a>
                  <img
                    class="img-fluid"
                    src="@/assets/icon-list.png"
                    v-on:click="onViewChange(true)"
                  >
                </a>
              </li>
              <li>
                <a>
                  <img
                    class="img-fluid"
                    src="@/assets/icon-grid.png"
                    v-on:click="onViewChange(false)"
                  >
                </a>
              </li>
            </ul>
          </div>
          <div class="sort-by-container">
            <p v-text="this.GetSanaText('SearchPage_SortBy','Sort by:')"></p>
            <sorting-dropdown v-bind:SortOptions="this.pagingInfo.Sorting"></sorting-dropdown>
          </div>
        </div>
      </div>
      <div class="list-loading-block" v-if="this.IsDataLaoding">
        <span>
          <!-- <p v-text="this.GetSanaText('SearchPage_Loading','Loading....')"></p> -->
          <img class="img-fluid" src="@/assets/loading.gif">
        </span>
      </div>
      <div v-else>
        <div v-if="searchResult.length>0">
          <!-- list items (grid/list) -->
          <div v-bind:class="gridRowCssClass">
            <div
              v-bind:class="gridColCssClass"
              v-for="(item,index) in searchResult"
              v-bind:key="index"
            >
              <keep-alive>
                <component v-bind:is="listViewComponent" v-bind:ListItem="item"></component>
              </keep-alive>
            </div>
          </div>
          <div class="row bottom-container">
            <div class="col-4">
              <p>Result 1-9 of 186</p>
            </div>
            <div class="col-4">
              <div class="paggination-block">
                <ul>
                  <li>
                    <a>
                      <img class="img-fluid" alt="Vue logo" src="@/assets/paggination-left.png">
                    </a>
                  </li>
                  <li>
                    <a class="active">1</a>
                  </li>
                  <li>
                    <a>2</a>
                  </li>
                  <li>
                    <a>3</a>
                  </li>
                  <li>
                    <a>4</a>
                  </li>
                  <li>
                    <a>5</a>
                  </li>
                  <li class="pagination-dots">
                    <a>...</a>
                  </li>
                  <li>
                    <a>
                      <img class="img-fluid" alt="Vue logo" src="@/assets/paggination-right.png">
                    </a>
                  </li>
                </ul>
              </div>
            </div>
            <div class="col-4">
              <div class="show-by-container">
                <p>Show:</p>

                <div class="dropdown">
                  <div class="btn btn-default" data-toggle="dropdown">
                    <span>9</span>
                    <div class="downArrow"></div>
                  </div>
                  <ul class="dropdown-menu dropdown-menu-right">
                    <li>
                      <a>1</a>
                    </li>
                    <li>
                      <a>2</a>
                    </li>
                    <li>
                      <a>3</a>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div v-else>
          <span>
            <p v-text="this.GetSanaText('SearchPage_NoResult','No Results Found')"></p>
          </span>
        </div>
      </div>
      <div class="row">
        <div class="col-12">
          <div class="dotted-border-block">
            <span></span>
          </div>
        </div>
      </div>
    </div>
    <div id="inventoryCheck" class="modal fade" role="dialog">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h4 class="modal-title font-weight-bold">0091.301.120(Standard)</h4>
            <h6 class="font-weight-bold">Item: 0091.301.120</h6>
            <button type="button" data-dismiss="modal" aria-label="Close" class="close">
              <span aria-hidden="true">Ã—</span>
            </button>
          </div>
          <div class="modal-body">
            <div class="ioo-table">
              <div class="ioo-table-row">
                <div class="ioo-table-head">Supplier code</div>
                <div class="ioo-table-head">Date</div>
                <div class="ioo-table-head">Supplier stock</div>
                <div class="ioo-table-head">Message</div>
              </div>
              <div class="ioo-table-body">
                <div class="ioo-table-row">
                  <div class="ioo-table-cell">ZFTBR</div>
                  <div class="ioo-table-cell">
                    2019-04-04
                    <br>12:00:00 AM
                  </div>
                  <div class="ioo-table-cell">53</div>
                  <div class="ioo-table-cell">dsd</div>
                </div>
                <div class="ioo-table-row">
                  <div class="ioo-table-cell">ZFTBR</div>
                  <div class="ioo-table-cell">
                    2019-04-04
                    <br>12:00:00 AM
                  </div>
                  <div class="ioo-table-cell">53</div>
                  <div class="ioo-table-cell">dsd</div>
                </div>
                <div class="ioo-table-row">
                  <div class="ioo-table-cell">ZFTBR</div>
                  <div class="ioo-table-cell">
                    2019-04-04
                    <br>12:00:00 AM
                  </div>
                  <div class="ioo-table-cell">53</div>
                  <div class="ioo-table-cell">dsd</div>
                </div>
                <div class="ioo-table-row">
                  <div class="ioo-table-cell">ZFTBR</div>
                  <div class="ioo-table-cell">
                    2019-04-04
                    <br>12:00:00 AM
                  </div>
                  <div class="ioo-table-cell">53</div>
                  <div class="ioo-table-cell">dsd</div>
                </div>
                <div class="ioo-table-row">
                  <div class="ioo-table-cell">ZFTBR</div>
                  <div class="ioo-table-cell">
                    2019-04-04
                    <br>12:00:00 AM
                  </div>
                  <div class="ioo-table-cell">53</div>
                  <div class="ioo-table-cell">dsd</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { mapActions, mapGetters } from "vuex";

import { FETCH_SEARCH_RESULT } from "../../store/action-types";
import {
  GET_PRODUCT_LIST,
  GET_SEARCHRESYULT_HEARDER,
  GET_PAGINGINFO
} from "../../store/getter-types";

import SearchBox from "../shared/ui/SearchBox.vue";
import SortingDropdown from "../shared/SortingDropdown.vue";

const AppHeader = () =>
  import(/* webpackChunkName:"app_header" */ "../shared/AppHeader.vue");
const ListView = () =>
  import(/* webpackChunkName:"list_view" */ "./ProductListItem.vue");
const GridView = () =>
  import(/* webpackChunkName:"grid_view" */ "./ProductGridItem.vue");

export default {
  name: "Search",

  // components.
  components: {
    "sana-app-header": AppHeader,
    "list-item": ListView,
    "grid-item": GridView,
    "sana-searchbox": SearchBox,
    "sorting-dropdown": SortingDropdown
  },

  // local state.
  data() {
    return {
      ListItems: {},
      IsDataLaoding: true,
      searchOptions: { query: "1", pagesize: 10 },
      listViewComponent: "list-item",
      gridRowCssClass: "",
      gridColCssClass: ""
    };
  },

  // props for the compoment.
  props: {},

  // Life sycle hooks.
  created() {
    const { query, pagesize } = this.$route.params;
    const searchopetions = this.searchOptions;
    console.log("Searchpage");
    if (query) {
      searchopetions.query = query;
    }
    if (pagesize) {
      searchopetions.pagesize = pagesize;
    }
    this.searchProducts();
  },

  mounted() {
    if (this.searchResult) {
      this.IsDataLaoding = true;
    }
  },

  // vue defult propetes for data manupilation.
  watch: {},

  filters: {},

  computed: {
    ...mapGetters("products", {
      searchResult: GET_PRODUCT_LIST,
      searchResultHeader: GET_SEARCHRESYULT_HEARDER,
      pagingInfo: GET_PAGINGINFO
    }),
    searchResultSummarytext() {
      const searchHeader = this.searchResultHeader;
      let sanatextvalue = this.GetSanaText(
        "SearchPage_SearchOn",
        "Search on: {[seach-key]} - {[product-count]} product(s) found"
      );
      if (searchHeader) {
        sanatextvalue = sanatextvalue
          .replace("{[seach-key]}", "Search key")
          .replace("{[product-count]}", searchHeader.TotalCount);
      }
      return sanatextvalue;
    }
  },

  methods: {
    ...mapActions("products", {
      fetchSearchResult: FETCH_SEARCH_RESULT
    }),
    searchProducts() {
      this.IsDataLaoding = true;
      this.fetchSearchResult(this.searchOptions).then((data) => {
        this.IsDataLaoding = false;
        return data;
      });
    },

    // events

    // list/grid view togle event
    onViewChange(islistview) {
      console.log(this.searchResultheader);
      if (!islistview) {
        this.gridRowCssClass = "product-grid-container row";
        this.gridColCssClass = "col-4";
        this.listViewComponent = "grid-item";
      } else {
        this.gridRowCssClass = "";
        this.gridColCssClass = "";
        this.listViewComponent = "list-item";
      }
    },

    // search button click event
    handleProductSearch(searchKey) {
      console.log("qery", searchKey);
      this.searchOptions = { query: searchKey, pagesize: 10 };
      this.searchProducts();
    }
  }
};
</script>
