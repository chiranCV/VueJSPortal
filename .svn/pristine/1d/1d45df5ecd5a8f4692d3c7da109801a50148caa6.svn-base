<template>
  <div class="grid-border">
    <div class="product-info">
      <div class="product-img">
        <img v-if="this.ListItem.ShowThumbnail" class="img-fluid" src="@/assets/lg-thumb-img.jpg">
      </div>
      <div class="product-info-block">
        <div class="row">
          <div class="col-7">
            <!-- eslint-disable max-len -->
            <a class="ioo-clearfix">
              <h6
                class="mb-0"
                v-text="this.ListItem.ProductModel.Product.Title"
                v-bind:title="this.ListItem.ProductModel.Product.Title"
              ></h6>
            </a>
            <div class="ioo-mb-10 ioo-clearfix">
              <span v-text="this.ListItem.ProductModel.Product.Id"></span>
              <span class="list-dropdown-text float-right ioo-float-left-dk">
                <sana-dropdown
                  SelectType="basic"
                  v-bind:DataList="this.getGlobleInventoryCheckTypes"
                  v-bind:PreSelecteditem="this.getGlobleInventoryCheckTypes[0]"
                  IdField="Id"
                  TextField="Title"
                  DefaultTextSanaTextKey="IOO_GlobalInventoryCheck_Type_DefaultText"
                  v-on:onChangeSelection="onGlobleInventorySelectionChange"
                  v-bind:Emit="true"
                ></sana-dropdown>
              </span>
            </div>
            <sana-stock v-if="this.UserHasAbilityTo('ViewStock')" v-bind:StockModel="stockModel"></sana-stock>
            <span
              class="ioo-mt-10 ioo-clearfix"
              v-if="this.ListItem && this.ListItem.CrossReferenceNumber"
            >
              {{this.GetSanaText("IOO_CrossReference","Cross Reference:")
              + this.ListItem.CrossReferenceNumber}}
            </span>
            <sana-inventory-check
              v-if="!this.ShopContext.IsUserAllowedActivity_30160
              && this.ShopContext.IsUserAllowedActivity_30200"
              v-bind:ProductId="this.ListItem.ProductModel.Product.Id"
              v-bind:ProductType="this.getProductType()"
              v-bind:Quantity="this.quantity.toString()"
            ></sana-inventory-check>
          </div>
          <div class="col-5">
            <div class="product-price text-right">
              <template v-if="this.UserHasAbilityTo('ViewPrices')">
                <!--(zfSettings.ShowNetPrice)-->
                <sana-price
                  v-if="this.ShopContext
                  && this.ShopContext.Settings
                  && this.ShopContext.Settings.ZFSettings
                  && this.ShopContext.Settings.ZFSettings.ShowNetPrice"
                  v-bind:title="this.GetSanaText('IOO_Net_Price','Net Price')"
                  v-bind:Price="this.ListItem.ProductModel.Product.NetPrice"
                ></sana-price>
                <!-- if (zfSettings.ShowGrossPrice)-->
                <sana-price
                  v-if="this.ShopContext
                  && this.ShopContext.Settings
                  && this.ShopContext.Settings.ZFSettings
                  && this.ShopContext.Settings.ZFSettings.ShowGrossPrice"
                  v-bind:title="this.GetSanaText('IOO_Gross_Price','Gross Price')"
                  v-bind:Price="this.ListItem.ProductModel.Product.GrossPrice"
                ></sana-price>
              </template>
            </div>
            <div class="auro-increment-input text-right ioo-mt-10">
              <template v-if="this.UserHasAbilityTo('OrderProducts')">
                <sana-qty-box
                  v-bind:QuantityModel="null"
                  v-on:onQuantityChange="this.onQuantityChange"
                  v-bind:IsDisabled="!this.ListItem.ProductModel.Product.IsOrderable"
                ></sana-qty-box>
              </template>
                <span class="text-center float-left ioo-clearfix ioo-mt-10 uom-text">Pcs</span>
            </div>
          </div>
        </div>
      </div>
      <div class="btn-block clearfix text-center">
        <div class="col-5 float-left pl-0 ioo-mw-100 ioo-dk-pr-0">
          <template v-if="true">
            <sana-link-button
              v-bind:BtnId="getComponentId('linkbtn',this.ListItem.ProductModel.Product.Id)"
              BtnClass="ioo-btn ioo-btn-default"
              BtnTextClass="btn-text"
              BtnTitle="Details"
              BtnTitleSanaTextKey="I00_DetailsButtonTitle"
              BtnText="Detail"
              BtnTextSanaTextKey="I00_DetailsButtonText"
              BtnRouteName="Detail"
              v-bind:BtnRouteParms="{ id: this.ListItem.ProductModel.Product.Id}"
              v-bind:BtnRouteQuery="{ redirect:redirectRoutePath }"
            ></sana-link-button>
          </template>
        </div>
        <div class="col-7 float-right pr-0 ioo-mw-100 ioo-dk-pl-0">
          <template v-if="this.UserHasAbilityTo('OrderProducts')">
            <sana-button
              BtnClass="ioo-btn ioo-btn-primary"
              BtnTextClass="btn-text"
              v-bind:BtnId="getComponentId('btn',this.ListItem.ProductModel.Product.Id)"
              BtnTitle="Add to basket"
              BtnTitleSanaTextKey="I00_AddtoBasketTitle"
              BtnText="Add to basket"
              BtnTextSanaTextKey="I00_AddtoBasketTitle"
              BtnPostTextClass="btn-cart-white"
              v-bind:IsDisabled="!this.ListItem.ProductModel.Product.IsOrderable"
              v-on:onButtonClick="onAddToBasket"
            ></sana-button>
          </template>
        </div>
      </div>
    </div>
  </div>
</template>
<script>
import QtyBox from "../shared/ui/QuantityBox.vue";
import PriceLabel from "../shared/ui/PriceLabel.vue";
import Stockindicator from "../shared/ui/StockIndicator.vue";
import Dropdown from "../shared/ui/Dropdown.vue";
import Button from "../shared/ui/Button.vue";
import LinkButton from "../shared/ui/LinkButton.vue";
import CheckInventory from "../shared/CheckInventory.vue";

export default {
  name: "ProductGridItem",
  components: {
    "sana-qty-box": QtyBox,
    "sana-price": PriceLabel,
    "sana-stock": Stockindicator,
    "sana-dropdown": Dropdown,
    "sana-button": Button,
    "sana-link-button": LinkButton,
    "sana-inventory-check": CheckInventory
  },
  data() {
    return {
      selectedProductType: Object,
      quantity: 0,
      redirectRoutePath: this.$route.path
    };
  },
  props: {
    ListItem: {
      type: Object
    }
  },
  computed: {
    stockModel() {
      return this.ListItem ? this.ListItem.Stock : {};
    },
    // check product has cross reference number or not
    hasCrossReference() {
      return !!(this.ListItem && this.ListItem.CrossReferenceNumber !== "");
    },
    // return global inventory check types if available on data model
    getGlobleInventoryCheckTypes() {
      return this.ListItem
        && this.ListItem.ProductModel
        && this.ListItem.ProductModel.ProductType
        && this.ListItem.ProductModel.ProductType.length > 0
        ? this.ListItem.ProductModel.ProductType
        : [];
    }
  },
  methods: {
    // method to reterive unique id for html element
    // concat given name with id value and return
    getComponentId(component, key) {
      return `${component}_${key}`;
    },
    // set selected global inventory check type value to local data variable
    onGlobleInventorySelectionChange(selectedItem) {
      this.selectedProductType = selectedItem || null;
    },
    // reterive the globle inventory check type value of given field
    // by default returns the 'Title' fields value
    getProductType(field = "Title") {
      // TODO: set Title or Id
      const val = this.selectedProductType
        ? this.selectedProductType[field]
        : "";
      return val;
    },
    // return the contity model for quantity box
    // TODO: returns default model, remove default model if not needed
    getQuantityModel() {
      return this.ListItem
        && this.ListItem.ProductModel
        && this.ListItem.ProductModel.Quantity
        ? this.ListItem.ProductModel.Quantity
        : {
          Step: 1,
          Minimum: 1,
          Maximum: 99999,
          Current: 1
        };
    },
    // handle qty box quantity change event
    // update local data value accordingly
    onQuantityChange(qty) {
      this.quantity = qty;
    },

    // emit add tobasket event to parent componemnt.
    onAddToBasket() {
      const productModel = this.ListItem.ProductModel;
      if (productModel && productModel.Quantity) {
        productModel.Quantity.Current = this.quantity;
      }
      this.$emit(
        "onAddProductToBasket",
        productModel,
        this.selectedProductType.Id
      );
    }
  }
};
</script>
