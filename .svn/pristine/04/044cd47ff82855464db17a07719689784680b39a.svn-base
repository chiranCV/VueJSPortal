<template>
  <div class="app-wrapper" v-if="!isLoading">
    <div class="container">
      <sana-app-header
        v-if="!this.IsPrintPreview"
        v-bind:headerTitle="this.GetSanaText('DetailsPage_Title','Product Details')"
      />
      <!-- Content Goes Here -->
      <div class="product-details-page">
        <div class="row">
          <div class="col-5">
            <div class="product-image">
              <img src="../../assets/sm-thumb-img.jpg" alt srcset>
            </div>
          </div>
          <div class="col-7">
            <div class="product-info">
              <div class="product-title">
                <h3 class="font-bold">{{product.Title}}</h3>
              </div>
              <div class="item-number">
                <div class="row mb-2 black-light font-verdana">
                  <div class="col-2">{{this.GetSanaText('DetailsPage_ItemNo','Item No.')}}</div>
                  <div class="col-10">{{product.Id}}</div>
                </div>
                <div class="row mb-4 black-light font-verdana">
                  <div class="col-12">
                    <span>{{this.GetSanaText('DetailsPage_NetWeight','Net weight:')}}</span>
                    <span>{{product.Weight}}</span> |
                    <span>{{this.GetSanaText('DetailsPage_GrossWeight','Gross weight:')}}</span>
                    <span>{{product.ProductGrossWeight}}</span>
                  </div>
                </div>
                <div class="row ioo-mb-20 mt-2 font-verdana">
                  <div
                    class="col-4 f-label"
                  >{{this.GetSanaText('DetailsPage_ItemNo','Requested Delivery date')}}</div>
                  <div class="col-8 date-picker">
                    <date-picker v-bind:DisableDates="diableDates"></date-picker>
                  </div>
                </div>
                <div class="row mb-3 font-verdana">
                  <div class="col-4 f-label">Quantity</div>
                  <sana-quantiy-box
                    v-bind:QuantityModel="quantityModel"
                    v-on:onQuantityChange="onQuantityChange"
                  />
                  <!-- <div class="col-2 qty-box">
                    <input type="number" name id>
                  </div>-->
                  <div class="col-4 dropdown-list-text-only mt-3 pl-0">
                    <sana-dropdown
                      SelectType="basic"
                      v-bind:DataList="productTypes"
                      IdField="Id"
                      TextField="Title"
                      v-bind:PreSelectedItemId="selectedProductTypeId"
                      v-on:onChangeSelection="onProductTypeChangeSelection"
                    />
                  </div>
                </div>
                <div class="row mb-3 font-verdana">
                  <div class="col-4 f-label">{{this.GetSanaText('DetailsPage_Price','Price')}}</div>
                  <div class="col-8">
                    <h6 class="mb-0 line-ht-22 font-bold">
                      <sana-price v-bind:Price="product.NetPrice"></sana-price>
                    </h6>
                    <span>{{this.GetSanaText('DetailsPage_PricePerPiece','Price per Pieces excl. tax')}}</span>
                  </div>
                </div>
                <div class="row">
                  <div class="col-8">
                    <sana-inventory-check
                      v-if="!this.IsPrintPreview"
                      v-bind:ProductId="this.product.Id"
                      v-bind:ProductType="this.selectedProductTypeTitle"
                      v-bind:Quantity="this.quantity.toString()"
                    ></sana-inventory-check>

                    <!-- <button class="ioo-btn ioo-btn-default ioo-mr-40">
                      <span class="btn-inner">
                        <span class="btn-text">Check Inventory</span>
                        <span class="btn-arrow-right"></span>
                      </span>
                    </button>-->

                    <button class="ioo-btn ioo-btn-primary" v-if="!this.IsPrintPreview">
                      <span class="btn-inner">
                        <span class="btn-text">Add to basket</span>
                        <span class="btn-cart-white"></span>
                      </span>
                    </button>
                  </div>
                  <div class="col-4" v-if="!this.IsPrintPreview">
                    <sana-print-preview></sana-print-preview>
                  </div>
                </div>
              </div>
              <div class="item-info"></div>
            </div>
          </div>
        </div>
      </div>
      <!-- Dotted lines -->
      <div class="row">
        <div class="col-12">
          <div class="dotted-border-block">
            <span></span>
          </div>
        </div>
      </div>
      <!-- dotted lines -->
      <sana-related-items></sana-related-items>
      <sana-last-viewed
        v-if="(lastViewdItemList)"
        v-bind:ProductId="this.$route.params.id"
        v-bind:LastViewdItemList="lastViewdItemList"
      ></sana-last-viewed>
      <sana-back-button BtnTextSanaTextKey="IOO_Button_Back" BtnDefultText="Back"></sana-back-button>
      <!--  Content ends -->
      <div class="row">
        <div class="col-12">
          <div class="dotted-border-block">
            <span></span>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>
<script>
import { mapActions, mapState } from "vuex";
import datePicker from "../shared/ui/Date.vue";
import {
  FETCH_PRODUCT_DETAIL,
  FETCH_LASTVIEWED_ITEMS,
  FETCH_DISABLE_DATE
} from "../../store/action-types";
import globalHelper from "../../helpers/GlobalHelper";
import Dropdown from "../shared/ui/Dropdown.vue";
import CheckInventory from "../shared/CheckInventory.vue";
import QuantityBox from "../shared/ui/QuantityBox.vue";
import PriceLabel from "../shared/ui/PriceLabel.vue";
import RelatedItems from "../shared/RelatedItems.vue";
import LastViewedProducts from "./LastViewedTab.vue";
import BackButton from "../shared/ui/BackButton.vue";
import PrintPreview from "../shared/PrintPreview.vue";

const AppHeader = () =>
  import(/* webpackChunkName:"app_header" */ "../shared/AppHeader.vue");

export default {
  name: "ProductDetail",
  components: {
    "sana-app-header": AppHeader,
    "sana-dropdown": Dropdown,
    "sana-inventory-check": CheckInventory,
    "sana-quantiy-box": QuantityBox,
    "sana-price": PriceLabel,
    "sana-related-items": RelatedItems,
    "date-picker": datePicker,
    "sana-back-button": BackButton,
    "sana-last-viewed": LastViewedProducts,
    "sana-print-preview": PrintPreview
  },
  data() {
    return {
      product: {},
      detailsModel: {},
      productTypes: [],
      quantityModel: {},
      quantity: 1,
      selectedProductType: null,
      selectedProductTypeId: null,
      selectedProductTypeTitle: null,
      lastViewdItemList: [],
      isLoading: false,
      diableDates: [],
      cars: [],
      date: new Date()
    };
  },
  props: {
    IsPrintPreview: Boolean
  },
  created() {
    const productId = this.$route.params.id;
    this.isLoading = true;
    this.fetchdisableDates();
    this.fetchProductDetail(productId).then(() => {
      this.isLoading = false;
      this.detailsModel = this.productDetailModel;
      this.product = this.productDetailModel.Product;
      this.productTypes = this.detailsModel.ProductType;
      this.quantityModel = this.detailsModel.Quantity;
      [this.selectedProductType] = this.productTypes;
      this.selectedProductTypeId = this.selectedProductType.Id;
      this.selectedProductTypeTitle = this.selectedProductType.Title;
    });
    this.lastViewedItems();
    this.diableDates = this.disableDateList;
    console.log(this.IsPrintPreview);
  },
  methods: {
    ...mapActions("products", {
      fetchProductDetail: FETCH_PRODUCT_DETAIL,
      fetchLastViewedItems: FETCH_LASTVIEWED_ITEMS
    }),
    ...mapActions("content", {
      fetchdisableDates: FETCH_DISABLE_DATE
    }),
    onQuantityChange(qty) {
      this.quantity = qty;
    },
    onProductTypeChangeSelection(val) {
      this.selectedProductTypeId = val.Id;
      this.selectedProductTypeTitle = val.Title;
    },
    lastViewedItems() {
      const productId = this.$route.params.id;
      const lastviewIdList = globalHelper.addNewProductToLastviewedIdList(
        productId
      );
      const lastViedLoadOptions = {
        productIdList: lastviewIdList,
        curentProductId: productId
      };
      this.fetchLastViewedItems(lastViedLoadOptions).then(() => {
        this.lastViewdItemList = this.lastViewedModel;
      });
    }
  },
  computed: {
    ...mapState("products", {
      // eslint-disable-next-line no-trailing-spaces
      productDetailModel: state =>
        // eslint-disable-next-line indent
        state.Product,
      // eslint-disable-next-line no-trailing-spaces
      lastViewedModel: state =>
        // eslint-disable-next-line indent
        state.LastViewItems
    }),
    ...mapState("content", {
      // eslint-disable-next-line no-trailing-spaces
      disableDateList: state =>
        // eslint-disable-next-line indent
        state.DisableDates
    })
  }
};
</script>
