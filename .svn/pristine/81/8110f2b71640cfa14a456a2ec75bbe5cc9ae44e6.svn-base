<template>
  <div class="cus-info-block">
    <h6>
      {{this.GetSanaText('CustomerSelection_Customer',
      'Customer')}} {{this.sapIdValue}}
      <img
        class="iconWarn"
        src="@/assets/icon-warning.png"
      >
    </h6>
    <div class="float-right">
      <a class="zfbtn ioo-pt-2" data-toggle="dropdown">
        {{this.GetSanaText('CustomerSelection_Change',
        'Change')}}
        <span class="downArrow"></span>
      </a>
      <ul class="dropdown-menu dropdown-menu-right">
        <li>
          <div class="form-group search-block">
            <img class="img-fluid" src="@/assets/search-left.png">
            <input type="text" v-model="search">
          </div>
        </li>
        <li>
          <ul class="application-list-block">
            <li v-for="(item,index) in filteredAccountList" v-bind:Key="index">
              <a
                v-bind:sapid="item.SAPCustomerNo"
                v-bind:supplierid="item.SupplierId"
                v-if="item.SAPCustomerNo != null"
                v-on:click="accountLineClickHandler(item)"
              >{{getCustomerAccountLineHandler(item)}}</a>
            </li>
          </ul>
        </li>
        <li>
          <button
            class="zfbtn primaryBtn"
            type="button"
            v-text="this.GetSanaText('CustomerSelection_ApplicationOverview',
        'Go to applicationOverview')"
          ></button>
        </li>
      </ul>
      <div class="hr-seprator"></div>
      <a
        class="ioo-pt-2"
        v-text="this.GetSanaText('CustomerSelection_ManageAccount',
        'Manage Account')"
      ></a>
    </div>
  </div>
</template>
<script>
import sessionManager from "../../helpers/session-manager";
import config from "../../config.json";

export default {
  name: "CustomerSuppireSelection",
  props: {
    AccountLines: {
      type: Array,
      required: true
    }
  },
  data() {
    return {
      search: "",
      sapIdValue: ""
    };
  },
  methods: {
    getCustomerAccountLineHandler: (item) => {
      if (item) {
        return `${item.CustomerNo}| ${item.CustomerName} - ${
          item.SupplierId
        }| ${item.SupplierName}| ${item.SAPCustomerNo}`;
      }

      return null;
    },
    accountLineClickHandler(item) {
      const sapId = item.SAPCustomerNo;
      const supId = item.SupplierId;
      const sapIdCookiename = config.Cookiekeys.SapId;
      const currentSapId = sessionManager.getCookie(sapIdCookiename);
      const cookieExpiaryTime = 60 * 24 * 365 * 100;

      if (currentSapId === sapId) {
        return;
      }
      if (sapId && supId) {
        if (sessionManager.chekcCookieExsitst(sapIdCookiename)) {
          sessionManager.removeCookie(sapIdCookiename);
        }
        sessionManager.setCookie(sapIdCookiename, sapId, cookieExpiaryTime);
      }

      this.$router.go(0);
    },
    setCookieHandler() {
      if (this.AccountLines.length) {
        const sapIdCookiename = config.Cookiekeys.SapId;
        const cookieExpiaryTime = 120;
        const defItem = this.AccountLines.filter(
          item =>
            item.IsDefault === true
        );

        if (!sessionManager.chekcCookieExsitst(sapIdCookiename)) {
          if (defItem && defItem.length === 1) {
            sessionManager.setCookie(
              sapIdCookiename,
              defItem[0].SAPCustomerNo,
              cookieExpiaryTime
            );

            this.sapIdValue = defItem[0].SAPCustomerNo;
          }
        } else {
          const cookieValue = sessionManager.getCookie(sapIdCookiename);
          const matchedItem = this.AccountLines.filter(
            item =>
              item.SAPCustomerNo === cookieValue
          );

          if (matchedItem && matchedItem.length === 1) {
            this.sapIdValue = matchedItem[0].SAPCustomerNo;
          } else {
            sessionManager.setCookie(
              sapIdCookiename,
              defItem[0].SAPCustomerNo,
              cookieExpiaryTime
            );

            this.sapIdValue = defItem[0].SAPCustomerNo;
          }
        }
      }
    }
  },
  computed: {
    filteredAccountList() {
      this.setCookieHandler();
      return this.AccountLines.filter(
        line =>
          line.CustomerNo.match(this.search)
          || line.CustomerName.toLowerCase().includes(this.search.toLowerCase())
          || line.SupplierId.match(this.search)
          || line.SupplierName.toLowerCase().includes(this.search.toLowerCase())
          || line.SAPCustomerNo.match(this.search)
      );
    }
  }
};
</script>
