<template>
  <div>
    <div class="input-group search-container">
      <input
        v-model="searchQery"
        v-on:blur="closeQuickSerchPopup"
        type="text"
        class="form-control"
        placeholder="Product name or item number"
        aria-label="Product name or item number"
        aria-describedby="basic-addon2"
      >
      <div class="input-group-append">
        <button class="ioo-btn ioo-btn-primary no-edge" v-on:click="onSearchButtonClick">
          <span class="btn-inner">
            <span class="btn-text">Search</span>
            <span class="btn-search-icon"></span>
          </span>
        </button>
      </div>
    </div>
    <div class="typeahead-dropdown list-group show-list" v-show="showQuickResult">
      <div v-for="(item,index) in suggestionList" v-bind:key="index">
        <a href="#" class="list-group-item">
          <div v-show="(index === 0)" class="auto-Complete-header">Clutches</div>
          <img src="@/assets/autocomplete-thumb-img.jpg">
          <p>{{item.Title}} -{{item.Id}}</p>
          <span class="fs-10">New Standard, Unpackaed</span>
        </a>
        <hr v-show="(index === (suggestionList.length - 1))" class="border-line">
      </div>
    </div>
  </div>
</template>
<script>
import { mapActions } from "vuex";
import { FETCH_SEARCH_SUGGESTIONS } from "../../../store/action-types";

export default {
  name: "SearchBox",
  data() {
    return {
      showQuickResult: false,
      searchQery: "",
      suggestionList: []
    };
  },
  watch: {
    searchQery(newValue, oldValue) {
      if (
        newValue !== ""
        && newValue !== oldValue
        && (newValue.length < oldValue.length
          || (newValue.length > oldValue.length && newValue.length > 4))
      ) {
        this.getSearchSuggestions(newValue);
      }
    }
  },
  methods: {
    ...mapActions("products", {
      fetchSearchSuggetions: FETCH_SEARCH_SUGGESTIONS
    }),
    onSearchButtonClick() {
      const searchterm = this.searchQery === "" ? "1" : this.searchQery;
      this.$emit("onSearch", searchterm);
    },
    closeQuickSerchPopup() {
      this.showQuickResult = false;
    },
    getSearchSuggestions(searchquery) {
      const searchOptions = { query: searchquery, pagesize: 5 };
      this.fetchSearchSuggetions(searchOptions).then((result) => {
        if (result) {
          this.suggestionList = result.Data;
        }
      });
      this.showQuickResult = true;
    }
  }
};
</script>
