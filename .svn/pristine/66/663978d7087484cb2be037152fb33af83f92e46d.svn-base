<template>
  <div class="last-viewed-block">
    <template v-if="this.hasLastViewed">
      <!-- Dotted lines -->
      <div class="row">
        <div class="col-12">
          <div class="dotted-border-block">
            <span></span>
          </div>
        </div>
      </div>
      <!-- dotted lines -->
      <div class="ioo-mt-40 mb-4 ioo-mb-40">
        <div class="d-flex flex-row">
          <div class="p-2 pr-10 ioo-mr-10">
            <h4
              class="font-bold"
            >{{this.GetSanaText("IOO_LastViewed_Header","Last viewed products")}}</h4>
          </div>
          <div class="p-2 ioo-mt-7">
            <a class="ml-2" href>{{this.GetSanaText("IOO_ViewAll","View all")}}</a>
          </div>
          <div class="p-2 ioo-mt-7" v-on:click="handleclearLatviewItems">
            <a class="ml-2">{{this.GetSanaText("IOO_Clear","Clear")}}</a>
          </div>
        </div>
      </div>
      <div class="caresoul-grid-container">
        <sana-carosel v-bind:listSize="lastviewedItemList.length">
          <div
            class="grid-carousel--card col-4"
            v-for="(item,index) in lastviewedItemList"
            v-bind:key="index"
          >
            <lastview-items
              v-bind:LastViewditemModel="item"
              v-on:showGlobalInventory="showGlobalInventory"
            ></lastview-items>
          </div>
        </sana-carosel>
      </div>
    </template>
    <div>
      <sana-model-popup ref="global_inventory_model_popup">
        <div class="modal-content">
          <div class="modal-header">
            <h4 class="modal-title font-weight-bold">{{this.productId+'('+this.productType+')'}}</h4>
            <h6
              class="font-weight-bold"
            >{{ getSanaTextValue("IOO_CheckInventory_Item","Item: ")+this.ProductId}}</h6>
            <button type="button" data-dismiss="modal" aria-label="Close" class="close">
              <span aria-hidden="true">Ã—</span>
            </button>
          </div>
          <div class="modal-body">
            <div class="ioo-table">
              <div class="ioo-table-row">
                <div
                  class="ioo-table-head"
                >{{this.getSanaTextValue('IOO_CheckInventory_SupplierCodeColumnTitle', 'Supplier code')}}</div>
                <div
                  class="ioo-table-head"
                >{{this.getSanaTextValue('IOO_CheckInventory_DateColumnTitle', 'Date')}}</div>
                <div
                  class="ioo-table-head"
                >{{this.getSanaTextValue('IOO_CheckInventory_SupplierStockColumnTitle', 'Supplier stock')}}</div>
                <div
                  class="ioo-table-head"
                >{{this.getSanaTextValue('IOO_CheckInventory_MessageColumnTitle', 'Message')}}</div>
              </div>
              <div class="ioo-table-body">
                <div
                  class="ioo-table-row"
                  v-for="(item, index) in this.itemSuppliers"
                  v-bind:key="index"
                >
                  <div class="ioo-table-cell">{{item.SupplierCode}}</div>
                  <div class="ioo-table-cell">{{item.Date}}</div>
                  <div class="ioo-table-cell">{{item.Stock}}</div>
                  <div class="ioo-table-cell">{{item.Message}}</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </sana-model-popup>
    </div>
  </div>
</template>

<script>
import $ from "jquery";
import { mapActions } from "vuex";
import { FETCH_GLOBAL_INVENTORY } from "../../store/action-types";
import carosel from "../shared/ui/Carousel.vue";
import globalHelper from "../../helpers/GlobalHelper";
import LastViewedItems from "./LastViewedTabItems.vue";
import ModelPopup from "../shared/ui/ModelPopup.vue";

export default {
  name: "LastViewed",
  components: {
    "sana-carosel": carosel,
    "lastview-items": LastViewedItems,
    "sana-model-popup": ModelPopup
  },
  props: {
    ProductId: {
      type: String,
      required: true
    },
    LastViewdItemList: {
      type: Array,
      required: true
    }
  },
  computed: {
    hasLastViewed() {
      return this.lastviewedItemList.length > 0;
    }
  },
  data() {
    return {
      isLoading: false,
      selectedProductType: "00",
      lastviewedItemList: [],
      itemSuppliers: [],
      productId: String,
      productType: String
    };
  },
  mounted() {
    this.lastviewedItemList = this.LastViewdItemList;
  },
  methods: {
    ...mapActions("products", {
      fetchGlobalInventory: FETCH_GLOBAL_INVENTORY
    }),
    onProductTypeChangeSelection(val) {
      this.selectedProductTypeId = val.Id;
      this.selectedProductTypeTitle = val.Title;
    },
    getProductTypes(ProductModel) {
      return ProductModel && ProductModel.ProductType.length > 0
        ? ProductModel.ProductType
        : [];
    },
    /* events */
    handleclearLatviewItems() {
      globalHelper.clearLastViewedItems();
      this.lastviewedItemList = [];
    },
    getSanaTextValue(textKey, defaultValue) {
      if (!textKey) {
        return defaultValue || "";
      }
      return this.GetSanaText(textKey, defaultValue);
    },
    showGlobalInventory(options) {
      this.productId = options.id;
      this.productType = options.type;

      this.fetchGlobalInventory(options).then((result) => {
        debugger;

        if (result && result.ItemInventories && options.type) {
          this.itemSuppliers = result.ItemInventories[0].ItemSuppliers;
          const element = this.$refs.global_inventory_model_popup.$el;
          $(element).modal("show");
        }
      });
    }
  }
};
</script>
